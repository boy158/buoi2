//thuật Toán sắp xếp nhánh cây : nguồn nhóm 7 
// Hàm heapify để tạo một cây heap từ một mảng
void heapify(int arr[], int n, int i) {
    int largest = i;
    int l = 2 * i + 1; // tính chỉ số của nút con bên trái
    int r = 2 * i + 2; // tính chỉ số của nút con bên phải
//So sánh giá trị của nút hiện tại với nút con bên trái 
//và bên phải
    if (l < n && arr[l] > arr[largest])
        largest = l;
    if (r < n && arr[r] > arr[largest])
        largest = r;
// Nếu nút hiện tại không phải là nút lớn nhất
// đổi chỗ nút hiện tại với nút lớn nhất 
//và tiếp tục xử lý cây heap
    if (largest != i) {
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
        heapify(arr, n, largest);
    }
}
//Hàm heapSort để sắp xếp mảng theo thứ tự
// từ lớn đến nhỏ
void heapSort(int arr[], int n) {
    // Tạo cây heap từ mảng
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }
//Đổi chỗ phần tử đầu tiên của mảng (nút lớn nhất) 
//với phần tử cuối cùng của mảng
//giảm kích thước của mảng đi 1
//và tiếp tục xử lý cây heap
    for (int i = n - 1; i >= 0; i--) {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;
        heapify(arr, i, 0);}}
int main() {
    int n;
    printf("Nhap so phan tu cua day: ");
    scanf("%d", &n);
    int arr[n];
    printf("Nhap day so: ");
// Nhập dãy số từ bàn phím
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
// Sắp xếp dãy số bằng cách sử dụng heap sort
    heapSort(arr, n);
    printf("Day so da sap xep: ");
// In dãy số đã được sắp xếp từ lớn đến nhỏ
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    return 0;
}

//Phương Pháp chọn trực tiếp : nguồn nhóm 4
//cài đặc:
void selectionSort(int arr[], int n) {
   int i, j, min_idx;
   for (i = 0; i < n-1; i++) {
      min_idx = i;
      for (j = i+1; j < n; j++)
         if (arr[j] < arr[min_idx])
            min_idx = j;
      swap(arr[min_idx], arr[i]);
   }
}

//vd : ví dụ về người dùng nhập vào một mảng rồi sắp xếp từ bé tới lớn bằng c++
#include <iostream>
using namespace std;

void selectionSort(int arr[], int n) {
   int i, j, min_idx;
   for (i = 0; i < n-1; i++) {
      min_idx = i;
      for (j = i+1; j < n; j++)
         if (arr[j] < arr[min_idx])
            min_idx = j;

      swap(arr[min_idx], arr[i]);
   }
}

int main() {
   int n;
   cout << "Nhap so phan tu cua mang: ";
   cin >> n;

   int arr[n];
   cout << "Nhap cac phan tu cua mang: ";
   for(int i = 0; i < n; i++) {
      cin >> arr[i];
   }

   selectionSort(arr, n);

   cout << "Mang da sap xep tu be den lon la: ";
   for(int i = 0; i < n; i++) {
      cout << arr[i] << " ";
   }

   return 0;
}


//Phương pháp tiềm kiếp nhị phân : 
cài đặt:
int binarySearch(int arr[], int l, int r, int x) {
   while (l <= r) {
      int mid = l + (r - l) / 2;

      // Nếu phần tử nằm ở giữa
      if (arr[mid] == x)
         return mid;

      // Nếu phần tử lớn hơn phần tử cần tìm, tìm kiếm ở nửa đầu
      if (arr[mid] > x)
         r = mid - 1;

      // Nếu phần tử nhỏ hơn phần tử cần tìm, tìm kiếm ở nửa sau
      else
         l = mid + 1;
   }

   // Phần tử không tồn tại trong danh sách
   return -1;
}

//ví dụ đơn giản về cách tìm kiếm một giá trị trong một mảng đã được sắp xếp bằng phương pháp tìm kiếm nhị phân:

#include <iostream>
using namespace std;

int binarySearch(int arr[], int left, int right, int x) {
   while (left <= right) {
      int mid = left + (right - left) / 2;

      if (arr[mid] == x)
         return mid;

      if (arr[mid] < x)
         left = mid + 1;

      else
         right = mid - 1;
   }

   return -1;
}

int main() {
   int arr[] = { 2, 4, 6, 8, 10 };
   int n = sizeof(arr) / sizeof(arr[0]);
   int x = 8;
   int result = binarySearch(arr, 0, n - 1, x);

   if (result == -1)
      cout << "Khong tim thay " << x << " trong mang";
   else
      cout << x << " duoc tim thay tai vi tri " << result;

   return 0;
}

//Phương pháp tìm kiếm tuyến tính:
cài đặt:
int TimKiemTuyenTinh(int a[], int n, int x)
{
	for (int i = 0; i < n;i++)
		if (a[i] == x)
			return 1;
	return 0;
} 

//ví dụ đơn giản về cách tìm kiếm một giá trị trong một mảng bằng phương pháp tìm kiếm tuyến tính trong C++:
#include <iostream>
using namespace std;

int linearSearch(int arr[], int n, int x) {
   for (int i = 0; i < n; i++) {
      if (arr[i] == x)
         return i;
   }

   return -1;
}

int main() {
   int arr[] = { 1, 3, 5, 7, 9 };
   int n = sizeof(arr) / sizeof(arr[0]);
   int x = 5;
   int result = linearSearch(arr, n, x);

   if (result == -1)
      cout << "Khong tim thay " << x << " trong mang";
   else
      cout << x << " duoc tim thay tai vi tri " << result;

   return 0;
}


//Phương pháp sắp xếp đổi chỗ trực tiếp :
Cài đặt:
oid bubbleSort(int arr[], int n) {
   for (int i = 0; i < n - 1; i++) {
      for (int j = 0; j < n - i - 1; j++) {
         if (arr[j] > arr[j + 1]) {
            int temp = arr[j];
            arr[j] = arr[j + 1];
            arr[j + 1] = temp;
         }
      }
   }
}

ví dụ về sắp xếp đổi chỗ trực tiếp bằng ngôn ngữ lập trình C++:

#include <iostream>
using namespace std;

void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

int main() {
    int n;
    cout << "Nhap so phan tu cua mang: ";
    cin >> n;
    int arr[n];
    cout << "Nhap cac phan tu cua mang: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    bubbleSort(arr, n);
    cout << "Mang da sap xep: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    return 0;
}


//Phương pháp sắp xếp chèn trực tiếp :
cài đặt:
void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

//ví dụ sắp xếp bằng c++:
#include <iostream>
using namespace std;

void insertionSort(int arr[], int n) {
    int i, j, key;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

int main() {
    int n, i;
    cout << "Nhap so phan tu cua mang: ";
    cin >> n;
    int arr[n];
    cout << "Nhap cac phan tu cua mang: ";
    for (i = 0; i < n; i++) {
        cin >> arr[i];
    }
    insertionSort(arr, n);
    cout << "Mang sau khi sap xep: ";
    for (i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    return 0;
}

//hàng đợi
//cài đặt
void Enqueue(int queue[], int element, int& rear, int arraySize) {
  //cài đặt hàng đợi, link tham khảo: https://laptrinhtudau.com/cai-dat-hang-doi-queue-bang-mang-c-c/

//Hàm khởi tạo queue
void Init(QUEUE &q){
    //gan front bang 0
    q.front = 0;
    //gan rear bang -1
    q.rear = -1;
}

//Hàm kiểm tra queue rỗng
int IsEmpty(QUEUE q){
    //neu front > rear thi hang doi rong va tra ve 1
    if (q.front > q.rear){
        return 1;
    }
    //nguoc lai khong rong thi tra ve 0
    return 0;
}

//Kiểm tra queue đầyint IsFull (QUEUE q){
    //neu rear == MAX - 1 thi hang doi day va tra ve 1
    if (q.rear==MAX-1){
        return 1;
    }
    //nguoc lai hang doi chua day
    return 0;
}

//Hàm add trong queue
void Add (QUEUE &q, int x){
    //Queue chưa đầy
    if (IsFull(q)==0) {
        //tang chi so rear len 1 don vi
        q.rear++;
        //them phan tu x vao cuoi hang doi
        q.A[q.rear] = x;
    }
}

//Hàm remove trong queueint Remove(QUEUE &q){
    int x;
    //neu hang doi khong rong
    if (!IsEmpty(q)) {
        //gan x bang phan tu dau tien cua hang doi
        x = q.A[q.front];
        //tang bien front len 1 don vi
        q.front++;
        //tra ve phan tu lay duoc
        return x;
    }
    else{//nguoc lai hang doi rong
        front = 0; rear = -1;
    }
}

//Nhập xuất phần tử trong mảng hàng đợi queue
void Input(QUEUE &q, int n){
    //duyet tu 0 den n
    for(int i = 0; i< n; i++){
        //thuc hien nhap gia tri vao bien x
        int x;
        printf("Nhap gia tri phan tu thu %d: ",i);
        scanf("%d",&x);
        //thuc hien add phan tu x vao queue
        Add(q,x);
    }
}

void Output(QUEUE q){
    //duyet tu phan tu dau ve phan tu cuoi queue
    for(int i = q.front; i <= q.rear; i++){
        //hien thi ra ket qua
        printf("%d \t",q.A[i]);
    }
}

#include <stdio.h>
#define MAX 100
typedef struct queue
{
    int A[MAX];
    int front, rear;
};
typedef struct queue QUEUE;
void Init(QUEUE &q){
    q.front = 0;
    q.rear = -1;
}
int IsEmpty(QUEUE q){
    if (q.front > q.rear){
        return 1;
    }
    return 0;
}
int IsFull (QUEUE q){
    if (q.rear==MAX-1){
        return 1;
    }
    return 0;
}
void Add (QUEUE &q, int x){
    if (IsFull(q)==0) {
        q.rear++;
        q.A[q.rear] = x;
    }
}
int Remove(QUEUE &q){
    int x;
    if (!IsEmpty(q)) {
        x = q.A[q.front];
        q.front++;
        return x;
    }
    else{
        q.front = 0; q.rear = -1;
    }
}
void Input(QUEUE &q, int n){
    for(int i = 0; i< n; i++){
        int x;
        printf("Nhap gia tri phan tu thu %d: ",i);
        scanf("%d",&x);
        Add(q,x);
    }
}
void Output(QUEUE q){
    for(int i = q.front; i <= q.rear; i++){
        //hien thi ra ket qua
        printf("%d \t",q.A[i]);
    }
}
int main(){
    QUEUE q;
    Init(q);
    //nhap N 
    int n;
    printf("NHAP N: ");
    scanf("%d",&n);
    Input(q,n);
    //hien thi phan tu
    printf("Cac phan tu vua nhap vao queue la: \n");
    Output(q);
    //thao tac add
    int x = 66;
    Add(q,x);
    printf("\nHang doi sau khi add %d la: \n",x);
    Output(q);
    int front = Remove(q);
    printf("\nHang doi sau khi remove phan tu %d la: \n",front);
    Output(q);
}


//cài đặt phương pháp sắp xếp nhanh, link tham khảo: https://duongdinh24.com/thuat-toan-quick-sort/

// Hàm phân đoạn
int partition(int a[], int low, int high){
    int pivot = a[high];     // Chọn pivot là phần tử cuối cùng
    int right = high-1, left = low;    // Chọn left, right
    while(true){                         // Trong khi còn đúng (left < right)
        while(left<=right && a[left]<pivot) left++;     // Tìm left thích hợp
        while(right>=left && a[right]>pivot) right--;   // Tìm right thích hợp
        if(left>=right)              // left >= right dừng
            break;
        swap(a[left], a[right]);     // Đổi chỗ
        left++;                     // Xét phần tử tiếp theo
        right--;
    }
    swap(a[left], a[high]);            // Đổi chỗ pivot về giữa mảng
    return left;                       // Trả về vị trí của pivot  
}
// Hàm quick sort
void quickSort(int a[], int low, int high){
    if(low < high)  //Mảng có nhiều hơn 0 phần tử
    {
        int pivot = partition(a, low, high);  // Chia đôi mảng
        quickSort(a,low, pivot-1);           // Đệ quy bên trái
        quickSort(a, pivot+1, high);         // Đệ quy bên phải
    }    
}
// Hàm đổi giá trị hai phần tử
void swap(int &a, int &b){
    int temp;
    temp = a;
    a = b;
    b = temp;
}

//ví dụ phương pháp sắp xếp nhanh mảng arr[] = { 10, 7, 8, 9, 1, 5 } , link tham khảo: https://dnmtechs.com/thuat-toan-sap-xep-nhanh-quicksort/
#include <iostream>

using namespace std;

int partition(int arr[], int low, int high)
{
	int pivot = arr[high];    //taking the last element as pivot
	int i = (low - 1);
	for (int j = low; j <= high - 1; j++)
	{
		// so sanh phan tu hien tai voi pivot
		//neu nho hon thi doi cho
		if (arr[j] <= pivot)
		{
			i++;
			swap(arr[i], arr[j]);
		}
	}
	swap(arr[i + 1], arr[high]);
	return (i + 1);
}

void quickSort(int arr[], int low, int high)
{
	if (low < high)
	{
		int pi = partition(arr, low, high);
		quickSort(arr, low, pi - 1);
		quickSort(arr, pi + 1, high);
	}
}

/* Ham in mang ra man hinh */
void printArray(int arr[], int size)
{
	int i;
	for (i = 0; i < size; i++)
		printf("%d ", arr[i]);
}

int main()
{
	int arr[] = { 10, 7, 8, 9, 1, 5 };
	int n = sizeof(arr) / sizeof(arr[0]);

	cout << "Mang truoc khi sap xep:" << endl;
	printArray(arr, n);

	quickSort(arr, 0, n - 1);

	cout << endl;
	cout << "Mang sau khi duoc sap xep:";
	cout << endl << endl;

	printArray(arr, n);
	
	cin.get();
	getchar();

	return 0;
}

//cài đặt đệ quy đuôi, link tham khảo: https://freetuts.net/de-quy-duoi-tail-recursion-2951.html
int UCLN(int m, int n){
  int r;
  if(m<n) return UCLN(n,m);
  r = m % n;
  if(r == 0) return n;
  else return UCLN(n,r);
}

//ví dụ đệ quy đuôi, tính ước chung lớn nhất UCLN, link tham khảo: https://freetuts.net/de-quy-duoi-tail-recursion-2951.html


#include <stdio.h>
 
int UCLN(int m, int n){
  int r;
  if(m<n) return UCLN(n,m);
  r = m % n;
  if(r == 0) return n;
  else return UCLN(n,r);
}
  
int main(void) {
  int kq,m,n;
  printf("Nhap gia tri m: ");
  scanf("%d", &m);
  printf("Nhap gia tri n: ");
  scanf("%d", &n);
  kq = UCLN(m,n);
  printf("Ket qua: %d",kq);
  return 0;  
}

//cài đặt tìm kiếm nhị phân, link tham khảo: https://gochocit.com/ky-thuat-lap-trinh/thuat-toan-tim-kiem-nhi-phan-binary-search

int BinarySearch(int a[],int n,int x)
{
	int left, right, mid; left=0; right=n-1;
	do{
		mid=(left+right)/2;
		if(a[mid]==x){
			return mid;
		}
		else if(a[mid]<x){
			left=mid+1;
		}
		else{
			right=mid-1;
		}
	}while(left<=right);
	return -1;
}

//cài đặt tìm kiếm nhị phân, link tham khảo: https://gochocit.com/ky-thuat-lap-trinh/thuat-toan-tim-kiem-nhi-phan-binary-search

int BinarySearch(int a[],int n,int x)
{
	int left, right, mid; left=0; right=n-1;
	do{
		mid=(left+right)/2;
		if(a[mid]==x){
			return mid;
		}
		else if(a[mid]<x){
			left=mid+1;
		}
		else{
			right=mid-1;
		}
	}while(left<=right);
	return -1;
}

//cài đặt thuật toán tìm kiếm tuyến tính, link tham khảo: https://gochocit.com/ky-thuat-lap-trinh/thuat-toan-tim-kiem-tuyen-tinh-linear-search
int LinearSearch(int a[], int n, int x)
{
	int i=0;
	while((i<n)&&(a[i]!=x)){
		i++;
	}
	if(i==n){
		return -1;//Tìm không thấy x
	}
	else{
		return i;//Tìm thấy x
	}
}


//ví dụ tìm kiếm tuyến tính, link tham khảo: https://laptrinhtudau.com/bai-tap-thuat-toan-tim-kiem-tuyen-tinh-linear-search-trong-c/

#include <stdio.h>
void Nhap(int a[],int n){
    for(int i=0; i<n; i++){
        printf("\nNhap a[%d]=",i);
        scanf("%d",&a[i]);
    }
}
void Xuat(int a[],int n){
    for(int i=0; i<n; i++){
        printf("%d \t",a[i]);
    }
}
int LinearSearch(int a[], int n, int x){
    for(int i=0; i<n; i++){
        if(a[i]==x){
            return i;
        }
    }
    return -1;
}
int main(){
    int a[100];
    int n;
    printf("Nhap so phan tu:");
    scanf("%d",&n);
    Nhap(a,n);
    printf("\nMang sau khi nhap la:\n");
    Xuat(a,n);
    int x;
    printf("\nNhap phan tu can tim:");
    scanf("%d",&x);
    if(LinearSearch(a,n,x)==-1){
        printf("Khong tim thay %d trong mang!",x);
    }else{
        printf("\nVi tri cua %d trong mang la: %d",x, LinearSearch(a,n,x));
    }    
}
